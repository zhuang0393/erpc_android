/*
 * Generated by erpcgen 1.12.0 on Sat Jun 22 14:36:07 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include <new>
#include "c_helloworld_server.h"
#include "helloworld_server.hpp"
#include "erpc_manually_constructed.hpp"

using namespace erpc;
using namespace std;
using namespace erpcShim;


class helloworld_server: public helloworld_interface
{
    public:
        virtual ~helloworld_server() {};


    binary_t * hello(const binary_t * input)
    {
        size_t len = 0;
        char *buf;

        printf("recv: %s\r\n", input->data);

        buf = (char *)malloc(strlen("hi, good!"));
        memset(buf, 0, strlen("hi, good!"));
        strncpy(buf, "hi, good!", strlen("hi, good!"));
        printf("send: hi, good!\n");
        len = strlen("hi, good!");

        return new binary_t{(uint8_t*)buf, (uint32_t)len};
    }
};

ERPC_MANUALLY_CONSTRUCTED_STATIC(helloworld_service, s_helloworld_service);
ERPC_MANUALLY_CONSTRUCTED_STATIC(helloworld_server, s_helloworld_server);

erpc_service_t create_helloworld_service(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) helloworld_service(new (nothrow)helloworld_server());
#else
    if (s_helloworld_service.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_helloworld_server.construct();
        s_helloworld_service.construct(s_helloworld_server.get());
        service = s_helloworld_service.get();
    }
#endif

    return service;
}

void destroy_helloworld_service(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (service)
    {
        delete (helloworld_server *)(((helloworld_service *)service)->getHandler());
        delete (helloworld_service *)service;
    }
#else
    (void)service;
    erpc_assert(service == s_helloworld_service.get());
    s_helloworld_service.destroy();
    s_helloworld_server.destroy();
#endif
}

